/* LICENSE NOTICE
	Copyright (c) 2009, Frederick Emmott <mail@fredemmott.co.uk>

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted, provided that the above
	copyright notice and this permission notice appear in all copies.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
#ifndef _FASTCGI_QT_DATABASE_H
#define _FASTCGI_QT_DATABASE_H

#include <QSqlDatabase>

namespace FastCgiQt
{
	/** Convenience class for using and cleaning up a single database connection per application.
	 *
	 * Database connections will be removed and cleaned up when the calling thread exits.
	 *
	 * @warning This class is not available if WITH_SQL_SUPPORT=OFF is
	 * 	passed to CMake when building FastCgiQt. The default is
	 * 	WITH_SQL_SUPPORT=ON.
	 */
	class Database
	{
		public:
			/// Whether or not there is an open connection for this thread.
			static bool haveConnection();
			/** Return a database for this thread, if there is one.
			 *
			 * if @p open is true, the database is opened if it is closed.
			 */
			static QSqlDatabase database(bool open = true);
			/** Add a new, per-thread database connection to a database
			 * of the specified type.
			 */
			static QSqlDatabase addDatabase(const QString& type);
			/** Reads configuration file variables.
			 *
			 * These can be generated by running your application with --configure-database
			 */
			static QSqlDatabase addDatabase();
	};
}

#endif
